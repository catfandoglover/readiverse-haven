Let me analyze the current flow and then propose a new plan.


problem:

The test completion button is storing the assessment ID in both localStorage and sessionStorage, but we need to be consistent
The auth callback needs to properly handle the assessment ID from the correct storage location


CURRENT FLOW:
1. Assessment ID handling is scattered across multiple components
2. ProfileDataContext tries multiple approaches to find DNA data:
   - Checks pending assessment ID in localStorage
   - Checks profile's assessment_id
   - Tries legacy lookup by record ID
   - Has emergency fallback to any record
3. The system sometimes saves incomplete assessments
4. There's complexity around matching assessment_id vs id fields
5. Multiple places try to update the profile with assessment_id


   - Don't create or save any assessment records until completion



PROPOSED NEW PLAN:

1. DURING ASSESSMENT:
   - Clear any stale assessment IDs from localStorage on start

2. ON ASSESSMENT COMPLETION:
   For Logged-in Users:
   - Create assessment record in Supabase
   - Update user's profile with assessment_id immediately
   - No need to use localStorage

   For Logged-out Users:
   - Create assessment record in Supabase
   - Store assessment_id in localStorage only
   - Don't create any profile association yet

3. ON LOGIN/SIGNUP:
   - Check localStorage for pending_dna_assessment_id
   - If found:
     * Update the user's profile with this assessment_id
     * Clear the localStorage entry
   - This should happen in the auth callback flow before any redirects


One additional scenario. if a logged out person takes the assessment and then logs in, that new assessment_id should not be associated with their profile. do not add it to profiles table. rather show a message popup saying "Your account is already associated with a completed assessment" and redirect user to /Profile page. 

4. IN PROFILE DATA CONTEXT:
   - Simplify to only look for assessment_id in the profile
   - Remove legacy lookup methods
   - Remove emergency fallbacks
   - Only use localStorage as temporary storage for logged-out users

5. ERROR HANDLING:
   - Clear error states when assessment starts
   - Provide clear feedback if assessment fails to save
   - Handle edge cases like:
     * Login fails after assessment completion
     * Network issues during save
     * Multiple tabs/sessions

This new approach would:
- Be more deterministic and have fewer edge cases
- Clearly separate logged-in vs logged-out flows
- Reduce complexity in the ProfileDataContext
- Prevent incomplete assessment data
- Make the assessment_id relationship more reliable

Would you like me to proceed with implementing any part of this plan?



## CHANGES

1. In `DNAAssessment.tsx`:
   - Assessment record is only created upon completion
   - For logged-in users: Creates assessment and updates profile
   - For logged-out users: Creates assessment and stores ID in localStorage

2. In `AuthCallback.tsx`:
   - Checks for pending assessment ID in localStorage upon login
   - Updates user's profile with the assessment ID if found
   - Clears the localStorage entry after successful update
   - Handles navigation to the appropriate screen

3. In `ProfileDataContext.tsx`:
   - Simplified to only look for assessment ID in the user's profile
   - Removed legacy lookup methods and emergency fallbacks
   - Improved error handling and state management
   - Updated types and context structure

The flow now works as follows:
1. User starts assessment (no data saved yet)
2. Upon completion:
   - If logged in: Assessment is created and profile is updated
   - If logged out: Assessment is created and ID stored in localStorage
3. On login/signup:
   - Checks localStorage for pending assessment ID
   - Updates profile if found
   - Clears localStorage entry
4. Profile context:
   - Only looks for assessment ID in profile
   - Provides clear error messages if not found

Would you like me to make any adjustments to this implementation?


One additional scenario. if a logged out person takes the assessment and then logs in, that new assessment_id should not be associated with their profile. do not add it to profiles table. rather redirect user to /Profile page. 



The changes have been implemented. Here's how the updated flow works:
When a user logs in, we first check if they already have an assessment_id in their profile
If they do have an existing assessment:
Show a toast message: "You already have a completed assessment, redirecting to your profile"
Clear any pending assessment ID from localStorage (if it exists)
Redirect them to the Profile page
If they don't have an existing assessment:
Continue with normal redirection flow
If they came from /dna/completion, redirect to /dna/welcome
Otherwise, redirect to the stored redirect URL or home
